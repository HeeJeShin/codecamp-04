//https://programmers.co.kr/learn/courses/30/lessons/17682

// [1차] 다트 게임
// 문제 설명
// 다트 게임
// 카카오톡에 뜬 네 번째 별! 심심할 땐? 카카오톡 게임별~

// Game Star

// 카카오톡 게임별의 하반기 신규 서비스로 다트 게임을 출시하기로 했다. 다트 게임은 다트판에 다트를 세 차례 던져 그 점수의 합계로 실력을 겨루는 게임으로, 모두가 간단히 즐길 수 있다.
// 갓 입사한 무지는 코딩 실력을 인정받아 게임의 핵심 부분인 점수 계산 로직을 맡게 되었다. 다트 게임의 점수 계산 로직은 아래와 같다.

// 다트 게임은 총 3번의 기회로 구성된다.
// 각 기회마다 얻을 수 있는 점수는 0점에서 10점까지이다.
// 점수와 함께 Single(S), Double(D), Triple(T) 영역이 존재하고 각 영역 당첨 시 점수에서 1제곱, 2제곱, 3제곱 (점수1 , 점수2 , 점수3 )으로 계산된다.
// 옵션으로 스타상(*) , 아차상(#)이 존재하며 스타상(*) 당첨 시 해당 점수와 바로 전에 얻은 점수를 각 2배로 만든다. 아차상(#) 당첨 시 해당 점수는 마이너스된다.
// 스타상(*)은 첫 번째 기회에서도 나올 수 있다. 이 경우 첫 번째 스타상(*)의 점수만 2배가 된다. (예제 4번 참고)
// 스타상(*)의 효과는 다른 스타상(*)의 효과와 중첩될 수 있다. 이 경우 중첩된 스타상(*) 점수는 4배가 된다. (예제 4번 참고)
// 스타상(*)의 효과는 아차상(#)의 효과와 중첩될 수 있다. 이 경우 중첩된 아차상(#)의 점수는 -2배가 된다. (예제 5번 참고)
// Single(S), Double(D), Triple(T)은 점수마다 하나씩 존재한다.
// 스타상(*), 아차상(#)은 점수마다 둘 중 하나만 존재할 수 있으며, 존재하지 않을 수도 있다.
// 0~10의 정수와 문자 S, D, T, *, #로 구성된 문자열이 입력될 시 총점수를 반환하는 함수를 작성하라.

// 입력 형식
// "점수|보너스|[옵션]"으로 이루어진 문자열 3세트.
// 예) 1S2D*3T

// 점수는 0에서 10 사이의 정수이다.
// 보너스는 S, D, T 중 하나이다.
// 옵선은 *이나 # 중 하나이며, 없을 수도 있다.
// 출력 형식
// 3번의 기회에서 얻은 점수 합계에 해당하는 정수값을 출력한다.
// 예) 37

// 입출력 예제
// 예제	dartResult	answer	설명
// 1	1S2D*3T	37	11 * 2 + 22 * 2 + 33
// 2	1D2S#10S	9	12 + 21 * (-1) + 101
// 3	1D2S0T	3	12 + 21 + 03
// 4	1S*2T*3S	23	11 * 2 * 2 + 23 * 2 + 31
// 5	1D#2S*3S	5	12 * (-1) * 2 + 21 * 2 + 31
// 6	1T2D3D#	-4	13 + 22 + 32 * (-1)
// 7	1D2S3T*	59	12 + 21 * 2 + 33 * 2

const filter = "qwertyuiopasdfghjklzxcvbnm1234567890-_."

function solution(new_id) {
    // 1단계 : 대문자를 -> 소문자로 치환
    new_id = new_id.toLowerCase();
    
    // 2단계 : 소문자, 숫자, 빼기, 밑줄, 마침표를 제외한 모든 문자 제거
    let answer = "";
    for( let i = 0; i < new_id.length; i++ ) {
        if( filter.includes( new_id[i] )) {
            answer += new_id[i];
        }
    }
    
    // 3단계 : .가 연속으로 들어오면 하나의 .로 치환 ( .. => . )
    while( answer.includes("..") ) {
        answer = answer.replace( "..", "." );
    }
    
    // 4단계 : .가 처음이나 끝에 위치한다면 제거
    if( answer[0] === "." ) {
        answer = answer.substr( 1 );
    }

    function removeLastDot() {
        if( answer[ answer.length - 1 ] === "." ) {
            answer = answer.slice( 0, answer.length - 1 );
        }
    };
    removeLastDot();
    
    // 5단계 : 빈 문자열이라면, "a"를 대입
    if( answer === "" ) {
        answer = "a";
    }
    
    // 6단계 : 문자열의 길이가 16자 이상이면, 15자의 길이를 가지는 문자열로 치환 (= 15 길이까지 자른다)
    //        제거한 후에, 마침표가 끝에 붙으면 제거
    if( answer.length >= 16 ) {
        answer = answer.slice( 0, 15 );
        removeLastDot();
    }
    
    // 7단계 : 문자열의 길이가 2자 이하라면, 마지막 글자로 3이 될 때까지 반복해서 추가
    if( answer.length <= 2 ) {
        answer = answer.padEnd( 3, answer[ answer.length - 1 ] );
    }
    return answer;
    //프로그래머스..
}